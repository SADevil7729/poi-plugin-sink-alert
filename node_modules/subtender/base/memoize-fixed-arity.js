"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.memoizeFixedArity = void 0;

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// `deepWrite(map)([k1,k2,k3...])(value)`
// - assigns `value` to `map.get(k1).get(k2).get(k3)...`.
// - new Map objects are created if some keys are missing along the path.
// - INVARIANT: keys.length >= 1
var deepWrite = function deepWrite(map) {
  return function (keys) {
    return function (value) {
      if (keys.length === 0) {
        console.error("invariant violation: empty key array");
        return undefined;
      }

      if (keys.length === 1) {
        var _keys = _slicedToArray(keys, 1),
            key = _keys[0];

        map.set(key, value);
        return map;
      } else {
        var _keys2 = _toArray(keys),
            _key = _keys2[0],
            ks = _keys2.slice(1);

        var subMap = map.has(_key) ? map.get(_key) : new Map();
        var subMapAfter = deepWrite(subMap)(ks)(value);
        map.set(_key, subMapAfter);
        return map;
      }
    };
  };
};

var deepLookup = function deepLookup(map) {
  return function (keys) {
    if (keys.length === 0) {
      return map;
    }

    var _keys3 = _toArray(keys),
        key = _keys3[0],
        restKeys = _keys3.slice(1);

    return map.has(key) ? deepLookup(map.get(key))(restKeys) : undefined;
  };
}; // when the arity of a pure func is fixed,
// it can be memoized by using multiple-layers of Maps


var memoizeFixedArity = function memoizeFixedArity(arity) {
  return function (func) {
    if (typeof arity !== 'number' || arity <= 0) {
      console.warn("invariant violation: arity should be a positive number"); // in this case we just leave the function intact and return it.

      return func;
    }

    var cache = new Map();
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (args.length !== arity) {
        console.warn("arity mismatched, skipping cache lookup.");
        return func.apply(void 0, args);
      }

      var cached = deepLookup(cache)(args);

      if (typeof cached === 'undefined') {
        var result = func.apply(void 0, args);
        cache = deepWrite(cache)(args)(result);
        return result;
      } else {
        return cached;
      }
    };
  };
};

exports.memoizeFixedArity = memoizeFixedArity;