"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shipRemodelInfoSelector = exports.canEquipDLCFuncSelector = exports.canEquipFuncSelector = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _reselect = require("reselect");

var _selectors = require("views/utils/selectors");

var _tier = require("../tier1");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
   eslint import/no-unresolved:
   [ 'error', { ignore: [
     'views/utils/selectors',
   ] }]
 */

/*
   returns a function:

   canEquip(equipMstId: int)(shipMstId: int): bool or null

   - curried in such a way to allow parametrizing on equipment id.

   - returning `null` means failure - it could be the case
     when either equipMstId or shipMstId is not found
   - returning a bool to indicate if it's possible to equip <equipMstId> on ship <shipMstId>

   - the data source is from poi's fcd data of WhoCallsTheFleet,
     which is introduce in poi-8.1.0. so in order to make this work,
     a supported version (at least 8.1.0) of poi is required.

 */
var canEquipFuncSelector = (0, _reselect.createSelector)(_selectors.wctfSelector, function (w) {
  return function (equipMstId) {
    var eqpInfo = _lodash.default.get(w, ['items', equipMstId]);

    if (_lodash.default.isEmpty(eqpInfo)) return function (_shipMstId) {
      return null;
    };
    return function (shipMstId) {
      var shipInfo = _lodash.default.get(w, ['ships', shipMstId]);

      if (_lodash.default.isEmpty(shipInfo)) return null;

      var eqpTypeInfo = _lodash.default.get(w, ['item_types', eqpInfo.type]);
      /* eslint-disable camelcase */


      var _eqpTypeInfo$equipabl = eqpTypeInfo.equipable_extra_ship,
          equipable_extra_ship = _eqpTypeInfo$equipabl === void 0 ? [] : _eqpTypeInfo$equipabl,
          equipable_on_type = eqpTypeInfo.equipable_on_type;
      /* eslint-enable camelcase */

      return equipable_on_type.includes(shipInfo.type) || equipable_extra_ship.includes(shipMstId);
    };
  };
});
/*
   returns canEquip function specialized on telling
   whether a ship is capable of equipping Daihatsu Landing Craft,
   so for the resulting function you need only give shipMstId.
 */

exports.canEquipFuncSelector = canEquipFuncSelector;
var canEquipDLCFuncSelector = (0, _reselect.createSelector)(canEquipFuncSelector, function (canEquip) {
  return _lodash.default.memoize(canEquip(68
  /* 大発動艇 */
  ));
});
/*
  Computes two objects: {originMstIdOf, remodelChains}

  remodelChains[originMstId] = <RemodelChain>

  - originMstId: master id (as Number) of the original ship
  - RemodelChain: an Array of master ids (as Numbers), sorted by remodeling order.

  Since 0.15.0 the algorithm is designed to handle branched remodels,
  if that ever happens, RemodelChain will sort master ids by
  number of remodel times to get to that particular master id.

  originMstIdOf[mstId] = <original master id>

  Prior to 0.15.0 values of originMstIdOf may be strings.
  But since 0.15.0 this value is always Number.

 */

exports.canEquipDLCFuncSelector = canEquipDLCFuncSelector;
var shipRemodelInfoSelector = (0, _reselect.createSelector)(_selectors.constSelector, function (_ref) {
  var $ships = _ref.$ships;
  return (0, _tier.shipRemodelInfoBuilder)($ships);
});
exports.shipRemodelInfoSelector = shipRemodelInfoSelector;