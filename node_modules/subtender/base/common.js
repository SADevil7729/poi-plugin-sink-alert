"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clamp = exports.words = exports.precompose = exports.compose = exports.singObj = exports.modifyObject = exports.not = exports.id = exports.ignore = exports.enumFromTo = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

// enumFromTo(x,y) = [x,x+1,x+2...y]
// override 'succ' and 'cond' for custom generating behavior
var enumFromTo = function enumFromTo(frm, to) {
  var succ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (x) {
    return x + 1;
  };
  var cond = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (x) {
    return x <= to;
  };
  var arr = [];

  for (var i = frm; cond(i); i = succ(i)) {
    arr.push(i);
  }

  return arr;
}; // usage: "ignore(a,b,c)" to make eslint believe that "a", "b" and "c"
// are somehow being used,
// it serves as an explicit annotation to say that they actually aren't


exports.enumFromTo = enumFromTo;

var ignore = function ignore() {
  return undefined;
};

exports.ignore = ignore;

var id = function id(x) {
  return x;
};

exports.id = id;

var not = function not(x) {
  return !x;
};

exports.not = not;

var modifyObject = function modifyObject(propName, f) {
  var removeUndefined = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (typeof f !== 'function') console.error('modifier is not a function');
  return function (obj) {
    var val = obj[propName];
    var isValAssigned = propName in obj;
    var newVal = f(val, propName, isValAssigned);
    if (val === newVal) return obj;

    if (typeof newVal === 'undefined' && removeUndefined) {
      if (isValAssigned) {
        var _ignored = obj[propName],
            rest = _objectWithoutProperties(obj, [propName]);

        return rest;
      } else {
        return obj;
      }
    } else {
      return _objectSpread({}, obj, _defineProperty({}, propName, newVal));
    }
  };
}; // create a singleton object


exports.modifyObject = modifyObject;

var singObj = function singObj(propName) {
  return function (v) {
    return _defineProperty({}, propName, v);
  };
}; // copied from redux
// originally https://github.com/reactjs/redux/blob/master/src/compose.js


exports.singObj = singObj;

var compose = function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
};

exports.compose = compose;

var precompose = function precompose(prj) {
  return function (f) {
    return function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return f.apply(void 0, _toConsumableArray(args.map(prj)));
    };
  };
};
/*
   split a string by ' '. mostly for providing
   a convenient way of writing constant Arrays,
   so you can write `words('a b c')` instead of `['a','b','c']`.
 */


exports.precompose = precompose;

var words = function words(xs) {
  return xs.split(' ');
};
/*
   I'm not going to deal with mismatching types or NaN,
   which is an unreadable mess by itself. do the sanity check yourself.
 */


exports.words = words;

var clamp = function clamp() {
  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -Infinity;
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : +Infinity;
  return function (v) {
    return v <= max ? v >= min ? v : min : max;
  };
};

exports.clamp = clamp;