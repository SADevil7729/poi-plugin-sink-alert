"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectZipper = void 0;

var _common = require("./common");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

var normKey = function normKey(rawKey) {
  return rawKey.toString();
}; // load a pair (focus) from object, key must be normalized strings


var loadPair = function loadPair(key) {
  return function (obj) {
    if (key in obj) {
      return {
        key: key,
        val: obj[key]
      };
    } else {
      return {
        key: key
      };
    }
  };
}; // unload a pair onto object, key must be normalized strings


var unloadPair = function unloadPair(pair) {
  return function (obj) {
    var key = pair.key;

    if ('val' in pair) {
      // val is assigned, which then always
      // overwrites whatever in the object
      // using modifyObject to avoid unnecessary overwrites
      return (0, _common.modifyObject)(key, function () {
        return pair.val;
      })(obj);
    } else {
      // val is not assigned
      if (key in obj) {
        // need to remove the value
        var _ignored = obj[key],
            rest = _objectWithoutProperties(obj, [key]);

        return rest;
      } else {
        return obj;
      }
    }
  };
};

var fromObject = function fromObject(obj) {
  return {
    type: 'zipper',
    whole: obj,
    focus: null
  };
};

var toObject = function toObject(ozp) {
  var whole = ozp.whole,
      focus = ozp.focus;
  if (focus === null) return whole;
  return unloadPair(focus)(whole);
}; // make sure we are focusing on a key


var focusKey = function focusKey(key) {
  return function (ozp) {
    var whole = ozp.whole,
        focus = ozp.focus; // no need of changing focus if it's already the focus

    if (focus !== null && key === focus.key) return ozp;
    var whole1 = focus === null ? whole : unloadPair(focus)(whole); // not using modifyObject here
    // at this point the focus must be changed anyways.

    return _objectSpread({}, ozp, {
      whole: whole1,
      focus: loadPair(key)(whole1)
    });
  };
};

var modifyVal = function modifyVal(modifier) {
  var removeUndefined = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return function (ozp) {
    var focus = ozp.focus;
    var key = focus.key,
        val = focus.val;
    var isValAssigned = 'val' in focus;
    var newVal = modifier(val, key, isValAssigned);

    if (typeof newVal === 'undefined' && removeUndefined) {
      if (isValAssigned) {
        return _objectSpread({}, ozp, {
          focus: {
            key: key
          }
        });
      } else {
        return ozp;
      }
    }

    if (newVal === val) return ozp;
    return _objectSpread({}, ozp, {
      focus: {
        key: key,
        val: newVal
      }
    });
  };
};

var ObjectZipper = function ObjectZipper() {
  _classCallCheck(this, ObjectZipper);
};

exports.ObjectZipper = ObjectZipper;
Object.defineProperty(ObjectZipper, "fromObject", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: fromObject
});
Object.defineProperty(ObjectZipper, "toObject", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: toObject
});
Object.defineProperty(ObjectZipper, "modify", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: function value(rawKey, modifier) {
    var removeUndefined = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    return function (ozp) {
      var key = normKey(rawKey);
      var ozp1 = focusKey(key)(ozp);
      var ozp2 = modifyVal(modifier, removeUndefined)(ozp1);
      return ozp2;
    };
  }
});
Object.defineProperty(ObjectZipper, "withZipped", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: function value(funcOzp) {
    return function (obj) {
      return toObject(funcOzp(fromObject(obj)));
    };
  }
});