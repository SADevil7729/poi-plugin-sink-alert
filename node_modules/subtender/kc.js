"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStrToId = exports.mapIdToStr = exports.splitMapId = exports.canEquipDLC = exports.SType = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var SType = {
  DE: 1,
  DD: 2,
  CL: 3,
  CLT: 4,
  CA: 5,
  CAV: 6,
  CVL: 7,
  FBB: 8,
  BB: 9,
  BBV: 10,
  CV: 11,
  XBB: 12,
  SS: 13,
  SSV: 14,
  AP: 15,
  AV: 16,
  LHA: 17,
  CVB: 18,
  AR: 19,
  AS: 20,
  CT: 21,
  AO: 22
};
exports.SType = SType;

var isOneOf = function isOneOf(xs) {
  return function (x) {
    return xs.indexOf(x) !== -1;
  };
};
/*
   DEPRECATION: note that this function is deprecated in favor of canEquipDLCFuncSelector from poi,
   as we have WhoCallsTheFleet data from poi, there is no point in maintaining a separated list
   and having to update this constantly.

   check whether a ship is capable of equipping Daihatsu Landing Craft (DLC for short)

   extracted and refactored from:
     https://github.com/KC3Kai/KC3Kai/blob/master/src/library/objects/Ship.js
 */


var canEquipDLC = function canEquipDLC(stype, masterId) {
  var DD = SType.DD,
      CL = SType.CL,
      BB = SType.BB,
      AV = SType.AV,
      LHA = SType.LHA,
      AO = SType.AO; // some DD / CL / BB are capable of equipping DLC,
  // we deal with this by whitelisting.

  if (isOneOf([DD, CL, BB])(stype)) {
    return isOneOf([// Light cruisers
    200, // Abukuma K2
    487, // Kinu K2
    488, // Yura K2
    547, // Tama K2
    478, // Tatsuta K2
    // Destroyers
    418, // Satsuki K2
    434, // Mutsuki K2
    435, // Kisaragi K2
    548, // Fumizuki K2
    464, // Kasumi K2
    470, // Kasumi K2B
    199, // Ooshio K2
    468, // Asashio K2D
    490, // Arashio K2
    489, // Michishio K2
    147, // Verniy
    469, // Kawakaze K2
    498, // Murasame K2
    // Battleships
    // Nagato K2(541)
    541])(masterId);
  } // most of AV / LHA / AO are capable of equipping DLC,
  // we deal with this by blacklisting those incapables


  if (isOneOf([AV, LHA, AO])(stype)) {
    return !isOneOf([445, // Akitsushima
    460, // Hayasui
    491, // Commandant Teste
    162] // Kamoi
    )(masterId);
  }

  return false;
};
/*
   split a mapId into "area" and "num"
   a mapId is a Number from api_id of map master data
 */


exports.canEquipDLC = canEquipDLC;

var splitMapId = function splitMapId(mapId) {
  return {
    area: Math.floor(mapId / 10),
    num: mapId % 10
  };
};
/*
   convert mapId to str, e.g. 12 -> "1-2", 401 -> "40-1"
 */


exports.splitMapId = splitMapId;

var mapIdToStr = function mapIdToStr(mapId) {
  var _splitMapId = splitMapId(mapId),
      area = _splitMapId.area,
      num = _splitMapId.num;

  return "".concat(area, "-").concat(num);
};
/*
   convert mapStr, which are strings like "1-1", "40-1",
   to mapId, returns null upon failure
 */


exports.mapIdToStr = mapIdToStr;

var mapStrToId = function mapStrToId(mapStr) {
  var matchResult = /^(\d+)-(\d+)$/.exec(mapStr);

  if (matchResult) {
    var _matchResult = _slicedToArray(matchResult, 3),
        _ignored = _matchResult[0],
        areaS = _matchResult[1],
        numS = _matchResult[2];

    return Number(areaS) * 10 + Number(numS);
  } else {
    return null;
  }
};

exports.mapStrToId = mapStrToId;