"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mkDebug = exports.injectReloaders = exports.selectorTester = void 0;

var _createStore = require("views/create-store");

/*
   eslint import/no-unresolved:
   [ 'error', { ignore: [
     'views/create-store',
   ] }]
 */
// injects a function onto window that can laterly be used to test selectors
var selectorTester = function selectorTester(selector) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'testSelector';
  var getState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _createStore.store.getState;

  // eslint-disable-next-line no-console
  window[name] = function () {
    var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : console.log;

    try {
      return f(selector(getState()));
    } catch (e) {
      console.error("error while testing selector ".concat(e));
    }
  };
};

exports.selectorTester = selectorTester;

var injectReloaders = function injectReloaders() {
  var clearCacheWithKeyword = function clearCacheWithKeyword(keyword) {
    var keys = Object.keys(require.cache).filter(function (x) {
      return x.indexOf(keyword) !== -1;
    });
    keys.map(function (x) {
      return delete require.cache[x];
    }); // eslint-disable-next-line no-console

    console.log('cleared keys: ', keys);
  };

  window.clearCacheWithKeyword = clearCacheWithKeyword;

  window.clearTaigeiCache = function () {
    return clearCacheWithKeyword('subtender');
  };

  window.clearI18nCache = function () {
    return clearCacheWithKeyword('i18n');
  };
};

exports.injectReloaders = injectReloaders;

var mkDebug = function mkDebug() {
  var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'subtender';
  var startEnabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var _window = window,
      dbg = _window.dbg;
  var dbgHandler = dbg.extra(tagName);

  if (startEnabled) {
    dbgHandler.enable();
  } else {
    dbgHandler.disable();
  }

  return dbgHandler;
};

exports.mkDebug = mkDebug;