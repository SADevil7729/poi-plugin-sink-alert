"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeMapDispatchToProps = exports.mergeMapStateToProps = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*

   despite the fact that mergeMapDispatchToProps and mergeMapStateToProps
   does not depend on anything, they require 'react-redux' to make sense.

 */

/*
   despite being different, mergeMapDispatchToProps is identical to
   that of mergeMapStateToProps. thus the sharing
 */
var gMergeMapStateOrDispatchToProps = function gMergeMapStateOrDispatchToProps(which) {
  return function () {
    for (var _len = arguments.length, mstps = new Array(_len), _key = 0; _key < _len; _key++) {
      mstps[_key] = arguments[_key];
    }

    var violatedInd = mstps.findIndex(function (mstp) {
      return typeof mstp !== 'function';
    });

    if (violatedInd !== -1) {
      console.error("".concat(which, " requires all of its arguments to be functions"));
      console.error("violation happens at arg ind ".concat(violatedInd));
      return function (_state) {};
    }

    var shouldRequestOwnProps = mstps.some(function (f) {
      return f.length !== 1;
    });

    if (shouldRequestOwnProps) {
      return function (state, ownProps) {
        return mstps.reduce(function (props, curMstp) {
          return _objectSpread({}, props, curMstp(state, ownProps));
        }, {});
      };
    } else {
      return function (state) {
        return mstps.reduce(function (props, curMstp) {
          return _objectSpread({}, props, curMstp(state));
        }, {});
      };
    }
  };
};
/*
   takes a list of mapDispatchToProps and construct a new one
   that maps state to an Object whose properties are merged
   from resulting Objects of these mapDispatchToProps functions.
 */


var mergeMapDispatchToProps = gMergeMapStateOrDispatchToProps('mergeMapDispatchToProps');
/*
   takes a list of mapStateToProps and construct a new one
   that maps dispatch to an Object whose properties are merged
   from resulting Objects of these mapStateToProps functions.
 */

exports.mergeMapDispatchToProps = mergeMapDispatchToProps;
var mergeMapStateToProps = gMergeMapStateOrDispatchToProps('mergeMapStateToProps');
exports.mergeMapStateToProps = mergeMapStateToProps;