"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  normalizeData: true
};
exports.normalizeData = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _base = require("../base");

Object.keys(_base).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _base[key];
    }
  });
});

var _redux = require("./redux");

Object.keys(_redux).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _redux[key];
    }
  });
});

var _reactRedux = require("./react-redux");

Object.keys(_reactRedux).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _reactRedux[key];
    }
  });
});

var _remodel = require("./remodel");

Object.keys(_remodel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _remodel[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*

   Despite that JSON Objects are intentionally unordered, we can still
   normalize it by re-inserting every pair in sorted order - as we assume
   there is no non-deterministic factor involved in object property insertion,
   we will always get the object whose `JSON.stringify` is always the same.

 */
var normalizeData = function normalizeData(val) {
  if (val === null || _typeof(val) !== 'object') return val;

  if (Array.isArray(val)) {
    return val.map(normalizeData);
  } else {
    var keys = Object.keys(val).sort();
    return _lodash.default.fromPairs(keys.map(function (k) {
      return [k, normalizeData(val[k])];
    }));
  }
};

exports.normalizeData = normalizeData;